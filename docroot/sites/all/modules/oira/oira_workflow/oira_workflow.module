<?php
/**
 * @file
 * Code for the OiRA Workflow feature.
 */

include_once 'oira_workflow.features.inc';


define('ROLE_OIRA_PARTNER', 'Partner');
define('ROLE_OIRA_PROJECT_MANAGER', 'Oira Project Manager');
define('ROLE_OIRA_SUPERVISOR', 'Oira Supervisor');


/**
 * Implements Elysia hook_cronapi().
 */
function oira_workflow_cronapi() {
  return array('oira_workflow_cron' => array(
    'description' => 'Set partners content from final draft to next state.',
    'rule' => '*/5 * * * *',
  ));
}

/**
 * Implements hook_cron().
 */
function oira_workflow_cron() {
  oira_workflow_partner_content_cron();
}

function _oira_get_content_types_for_partners() {
  return array('news', 'practical_tool', 'promotional_material', 'strategic_documentation');
}

function _oira_get_content_types_for_private_zone() {
  return array('strategic_documentation');
}

/**
 * Implements hook_permission().
 */
function oira_workflow_permission() {
  $permissions = array();
  $permissions['select content section'] = array('title' => t("Can select section of a content"));
  return $permissions;
}

/**
 * Cron callback to auto moderate partners' content.
 */
function oira_workflow_partner_content_cron() {
  // Moderate content created by a partner, that is in Final Draft for some time.
  $users = OshaWorkflowPermissions::getUsersByRole(ROLE_OIRA_PARTNER);
  $uids = array();
  foreach ($users as $usr) {
    $uids[] = $usr->uid;
  }

  // Getting the nids that have passed the final draft state.
  $subquery = db_select('workbench_moderation_node_history', 'wm')
    ->fields('wm', array('nid'))
    ->condition('wm.state', 'final_draft')
    ->condition('wm.current', 1);

  $time_limit = _oira_workflow_partner_content_get_time_limit();
  // Getting content that needs to be auto moderated.
  $query = db_select('workbench_moderation_node_history', 'wmh')
    ->fields('wmh', array('nid'))
    ->distinct()
    ->condition('wmh.from_state', 'draft')
    ->condition('wmh.state', 'final_draft')
    ->condition('wmh.nid', $subquery, 'IN')
    ->condition('wmh.uid', $uids, 'IN')
    ->condition('wmh.stamp', $time_limit, '<=')
    ->orderBy('wmh.hid', 'DESC')
    ->execute();

  while ($row = $query->fetchAssoc()) {
    $node = node_load($row['nid']);
    if (!empty($node)) {
      $current_node = workbench_moderation_node_current_load($node);
      if (!empty($current_node->workbench_moderation['current'])
        && $current_node->workbench_moderation['current']->state == 'final_draft') {
        $next_state = OSHA_WORKFLOW_STATE_TO_BE_REVIEWED;

        // If no supervisor exists, state to be approved.
        $supervisors = osha_workflow_users_get_users_from_role(ROLE_OIRA_SUPERVISOR, TRUE);
        if (empty($supervisors)) {
          $next_state = OSHA_WORKFLOW_STATE_TO_BE_APPROVED;
        }

        // Moderate the content.
        workbench_moderation_moderate($current_node, $next_state);
        watchdog('oira_workflow', 'Node !title automoderated to !state', array('!title' => $current_node->title, '!state' => $next_state), WATCHDOG_INFO);
      }
    }
  }
}

/**
 * Get the relative time limit that a partner content should should be auto
 * moderated to to be reviewed.
 */
function _oira_workflow_partner_content_get_time_limit() {
  $time_gap = (int) variable_get('oira_workflow_partner_content_minutes_gap_autosubmit', 30);
  return time() - $time_gap * 60;
}

/**
 * Implements hook_mail_alter().
 */
function oira_workflow_mail_alter(&$message) {
  if (strpos($message['key'], 'oira_workflow')) {
    // Block mails that are send for hwc workflow if user's preference.
    $user = user_load_by_mail($message['to']);
    $send_notif = variable_get('osha_workflow_send_mail', FALSE);
    // when using rereoute mail, the to address is not of an user.
    $usr_receive_notif = empty($user) || !empty($user->field_cmw_mail_notifications[LANGUAGE_NONE][0]['value']);
    if (!$send_notif || !$usr_receive_notif) {
      $message['send'] = FALSE;
    }
  }
}

/**
 * Implements hook_node_access().
 */
function oira_workflow_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  if (($op == 'update' || $op == 'delete')
    && in_array($node->type, ncw_migration_get_migrated_bundles())
    && $node->uid == 0) {
    return NODE_ACCESS_DENY;
  }

  // Workflow validations are only for partners content.
  if (!in_array($type, _oira_get_content_types_for_partners())) {
    return NODE_ACCESS_IGNORE;
  }

  // Administrators skip further validations
  if (in_array(OSHA_WORKFLOW_ROLE_ADMINISTRATOR, $account->roles)) {
    return NODE_ACCESS_IGNORE;
  }

  // Supervisors have access based on perm
  // skip additional validations..
  if (in_array(ROLE_OIRA_SUPERVISOR, $account->roles)) {
    return NODE_ACCESS_IGNORE;
  }

  // Private zone content types should only be visible by partners users.
  if (in_array($type, _oira_get_content_types_for_private_zone())) {
    if ($account->uid == 0) {
      return NODE_ACCESS_DENY;
    }
  }

  // Deny access to Published content
  if(
    ($op == 'update' || $op == 'delete')
    && !empty($node->workbench_moderation['current']->state)
    && $node->workbench_moderation['current']->state == OSHA_WORKFLOW_STATE_PUBLISHED) {
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * If node is in one of Editor's section.
 */
function oira_workflow_node_has_partner_user($node, $user) {
  $wa_sections = osha_workflow_editor_get_sections($user);
  $wa_sections = array_keys($wa_sections);
  if (!isset($node->workbench_access) || in_array('section', $wa_sections)) {
    return TRUE;
  }
  $common_sections = array_intersect($wa_sections, $node->workbench_access);
  if (!empty($common_sections)) {
    return TRUE;
  }
  return FALSE;
}

function oira_workflow_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (!empty($form['#node']->type) && in_array($form['#node']->type, _oira_get_content_types_for_partners())) {
//    if ($form_id == 'node_delete_confirm') {
//      $node_workbench_moderation_state_current = !empty($form['#node']->workbench_moderation['current']->state) ? $form['#node']->workbench_moderation['current']->state : workbench_moderation_state_none();
//      $can_delete = (user_access("delete any {$form['#node']->type} content") || user_access("delete own {$form['#node']->type} content")) && user_access("delete any content in {$node_workbench_moderation_state_current}");
//
//      if (in_array('administrator', $user->roles)) {
//        return;
//      }
//
//      if (!$can_delete  || !in_array(ROLE_OIRA_PARTNER, $user->roles)) {
//        drupal_goto('<front>');
//      }
//
//      $partner_id = osha_workflow_user_partner_id($form['#node']->uid);
//
//      if ($partner_id!==NULL && $can_delete && in_array(ROLE_OIRA_PARTNER, $user->roles)) {
//        unset($_GET['destination']);
//        $form['actions']['cancel']['#href'] = 'node/' . $partner_id . '/edit-' . $form['#node']->type . '/' . $form['#node']->nid;
//      }
//
//      return;
//    }

    if (isset($form['#node_edit_form'])) {
      $node = $form['#node'];
//      $node_workbench_moderation_state_current = !empty($node->workbench_moderation['current']->state) ? $node->workbench_moderation['current']->state : workbench_moderation_state_none();
//      $can_delete = (user_access("delete any {$node->type} content") || user_access("delete own {$node->type} content")) && user_access("delete any content in {$node_workbench_moderation_state_current}");
      if (!empty($node->nid)) {
        $form['actions']['delete'] = array(
          '#type' => 'submit',
          '#value' => t('Delete'),
          '#weight' => 19,
          '#submit' => array('node_form_delete_submit'),
          '#access' => node_access('delete', $node),
        );
      }

      if ($form['#form_id'] == 'news_node_form') {
        $partner_role = user_role_load_by_name(ROLE_OIRA_PARTNER);
        if ($uid = $form['#node']->uid) {
          $partner = user_load($uid);
          if (user_has_role($partner_role->rid, $partner)) {
              $format = 'full_html';
              if (user_has_role($partner_role->rid)) {
                $format = 'filtered_html_minimal';
              }
              if ($form['body'][$form['body']['#language']][0]['#format'] != $format) {
                $form['body'][$form['body']['#language']][0]['#format'] = $format;
              }
              if ($form['field_summary'][$form['field_summary']['#language']][0]['#format'] != $format) {
                $form['field_summary'][$form['field_summary']['#language']][0]['#format'] = $format;
              }
          }
        }
      }

      if (in_array(ROLE_OIRA_PARTNER, $user->roles) && count($user->roles) == 2) {
        foreach($user->workbench_access as $user_id_section => $value) {
          if (!empty($form['workbench_access']['workbench_access']['#options'])) {
            foreach($form['workbench_access']['workbench_access']['#options'] as $wb_id_section => $label) {
              if ($user_id_section == $wb_id_section) {
                $form['workbench_access']['workbench_access']['#default_value'] = $user_id_section;
                $form['workbench_access']['workbench_access']['#access'] = FALSE;
                break;
              }
            }
          }
        }
//      if (empty($form['workbench_access']['workbench_access']['#default_value'])) {
//        if (empty($form['#node']['workbench_access']['workbench_access']['#default_value'])) {
//          drupal_goto('<front>');
//        }
//      }
        $form['#after_build'][] = 'oira_workflow_node_form_after_build_hide_hints';

        if (!empty($form['field_wf_notification'])) {
          $form['field_wf_notification']['#access'] = FALSE;
        }

        _oira_workflow_partner_node_form_alter($form, $form_state);
      }

      if (_oira_content_is_in_review($node)) {
        $form['revision_information']['log']['#default_value'] = '';
        $form['revision_information']['log']['#element_validate'][] = '_oira_workflow_log_required_validate';
        $form['revision_information']['log']['#states']['required'] = array(':input[name=workbench_moderation_state_new]' => array('value' => 'draft'));
      }
    }
  }

  // Implements permission select content section.
  if (isset($form['#node_edit_form']) && !empty($form['workbench_access']['workbench_access'])) {
    $form['workbench_access']['workbench_access']['#access'] = user_access('select content section');
  }
}

/**
 * Implements hook_form_alter().
 */
function oira_workflow_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if (isset($form['#node_edit_form']) && !empty($form['workbench_access']['workbench_access'])) {
    $q = db_select('workbench_access_node', 't');
    $q->leftJoin('taxonomy_term_data', 's', 't.access_id = s.tid');
    $q->leftJoin('node', 'n', 'n.nid = t.nid');
    $q->addField('t', 'access_id', 'tid');
    $q->condition('t.access_id', 'section', '<>');
    $q->condition('n.type', 'partner');
    $q->condition('n.status', 0);
    $sections = $q->execute()->fetchAll();
    $default_value = 0;
    if ($form['workbench_access']['workbench_access']['#default_value']) {
      $default_value = $form['workbench_access']['workbench_access']['#default_value'][0];
    }

    $q = db_select('workbench_access_node', 'w');
    $q->innerJoin('taxonomy_term_data', 't1', 't1.tid = w.access_id');
    $q->innerJoin('node', 'n', 'n.nid = w.nid');
    $q->condition('n.type', 'partner');
    $q->distinct();

    $q->fields('w', ['access_id']);
    $q->addField('t1', 'name', 'partner_name');

    $q->innerJoin('field_data_field_country', 'c', 'c.entity_id = n.nid');
    $q->innerJoin('field_data_field_oira_eu_level', 'e', 'c.entity_id = n.nid');
    $q->innerJoin('taxonomy_term_data', 't2', 't2.tid = c.field_country_tid');


    $q->addField('t2', 'name', 'country_name');
    $q->fields('c', ['field_country_tid']);
    $q->fields('e', ['field_oira_eu_level_value']);

    $rs = $q->execute()->fetchAll();
    foreach($rs as $row) {
      if (intval($row->field_oira_eu_level_value)) {
        $row->name = 'EU level';
      }
      $form['workbench_access']['workbench_access']['#options'][$row->access_id] = $row->country_name . ' - ' . $row->partner_name;
      if (!empty($form['field_co_author'])) {
        $form['field_co_author'][LANGUAGE_NONE]['#options'][$row->access_id] = $row->country_name . ' - ' . $row->partner_name;
      }
      if (!empty($form['field_third_partner'])) {
        $form['field_third_partner'][LANGUAGE_NONE]['#options'][$row->access_id] = $row->country_name . ' - ' . $row->partner_name;
      }
    }
    foreach ($sections as $section) {
      if ($section->tid == $default_value) {
        continue;
      }
      if (isset($form['workbench_access']['workbench_access']['#options'][$section->tid])) {
        unset($form['workbench_access']['workbench_access']['#options'][$section->tid]);
        if (!empty($form['field_third_partner'])) {
          unset($form['field_third_partner'][LANGUAGE_NONE]['#options'][$section->tid]);
        }
        if (!empty($form['field_co_author'])) {
          unset($form['field_co_author'][LANGUAGE_NONE]['#options'][$section->tid]);
        }
      }
    }
    asort($form['workbench_access']['workbench_access']['#options']);
    if (!empty($form['field_co_author'])) {
      asort($form['field_co_author'][LANGUAGE_NONE]['#options']);
    }
    if (!empty($form['field_third_partner'])) {
      asort($form['field_third_partner'][LANGUAGE_NONE]['#options']);
    }
  }

  if ($form_id == 'oira_configuration_form') {
    $form['oira_workflow_partner_content_minutes_gap_autosubmit'] = array(
      '#type' => 'textfield',
      '#title' => 'How many minutes can the partner still edit the node?',
      '#default_value' => variable_get('oira_workflow_partner_content_minutes_gap_autosubmit', 30),
      '#attributes' => array('size' => 5),
      '#description' => "After partner submits the content, he can still edit for this amount of time"
    );
  }

  if (!empty($form['workbench_access']['workbench_access']['#options']['section'])) {
    $form['workbench_access']['workbench_access']['#title'] = 'Partner';
    $form['workbench_access']['workbench_access']['#options']['section'] = 'General Public';
  }


}

function _oira_workflow_log_required_validate($element, &$form_state) {
  $values = $form_state['values'];
  if (in_array($values['workbench_moderation_state_current'],
    array(OSHA_WORKFLOW_STATE_TO_BE_APPROVED, OSHA_WORKFLOW_STATE_TO_BE_REVIEWED))
    && $values['workbench_moderation_state_new'] == OSHA_WORKFLOW_STATE_DRAFT
    && empty($values[$element['#name']])) {
    form_error($element, t('Please provide an explanation message why are you rejecting this content.'));
  }
}

function _oira_content_is_in_review($node) {
  return !empty($node->workbench_moderation['current']) &&
    in_array(
      $node->workbench_moderation['current']->state,
      array(OSHA_WORKFLOW_STATE_TO_BE_APPROVED, OSHA_WORKFLOW_STATE_TO_BE_REVIEWED)
    );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oira_workflow_form_workbench_moderation_moderate_form_alter(&$form, &$form_state, $form_id) {
  if (_oira_content_is_in_review($form['node']['#value'])) {
    $form['state']['#ajax'] = array(
      'callback' => '_oira_workflow_moderation_rejecting_ajax_callback',
      'wrapper' => $form['#id'],
      'method' => 'replace',
      'effect' => 'fade',
    );
    if (!empty($form_state['values']['state']) && $form_state['values']['state'] == OSHA_WORKFLOW_STATE_DRAFT) {
      $form['message'] = array(
        '#type' => 'textarea',
        '#title' => 'Message',
        '#required' => TRUE,
      );
      $form['submit']['#weight'] = 3;
    }
    // Hijack workbench_moderation_moderate_form_submit
    $form['#submit'] = array('_oira_workflow_save_message_submit');
  }
}

function _oira_workflow_moderation_rejecting_ajax_callback($form, $form_state) {
  return $form;
}


/**
 * Hijack workbench_moderation_moderate_form_submit.
 */
function _oira_workflow_save_message_submit($form, $form_state) {
  if (_workbench_moderation_moderate_access($form_state['values']['node'], $form_state['values']['state'])) {
    $node = node_load($form_state['values']['node']->nid, $form_state['values']['node']->vid);

    workbench_moderation_moderate($node, $form_state['values']['state']);
  }

  // Update log revision when rejecting.
  if (!empty($form_state['values']['message'])) {
    $vid = db_select('workbench_moderation_node_history', 'wnh')
      ->fields('wnh', array('vid'))
      ->condition('nid', $form['node']['#value']->nid)
      ->orderBy('hid', 'DESC')
      ->execute()
      ->fetchField(0);
  }
  if (!empty($vid)) {
    db_update('node_revision')
      ->fields(array('log' => filter_xss($form_state['values']['message'])))
      ->condition('vid', $vid)
      ->execute();
  }

  // This is not ideal, but if the form is invoked from a node's draft tab and
  // used to publish the node, the draft tab will not be available after
  // publishing, and Drupal's will throw an access denied error before it is
  // able to redirect to the published revision.
  if (!empty($form['#destination'])) {
    if ($form_state['values']['state'] == workbench_moderation_state_published()) {
      if ($uri = entity_uri('node', $form['node']['#value'])) {
        // Disable lookup of the path alias, since the path alias might get
        // changed by modules such as Pathauto.
        $uri['options']['alias'] = TRUE;
        $form_state['redirect'] = array($uri['path'], $uri['options']);
      }
    }
    else {
      $form_state['redirect'] = $form['#destination'];
    }
    drupal_redirect_form($form_state);
  }

}

/**
 * Adds and hides elements on node add/edit for partners.
 */
function _oira_workflow_partner_node_form_alter(&$form, &$form_state) {
  $form['revision_information']['#access'] = FALSE;
  if (!empty($form['workbench_moderation_state_current']['#value']) && $form['workbench_moderation_state_current']['#value'] == 'draft') {
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['save_preview'] = array(
      '#type' => 'submit',
      '#value' => t('Save and preview this new item'),
      '#submit' => array('oira_workflow_node_form_submit_preview'),
    );
    $form['actions']['send_for_approval'] = array(
      '#type' => 'submit',
      '#value' => t('Submit this new item to validation'),
      '#submit' => array('oira_workflow_node_form_submit_send'),
    );
  }
  if (!empty($form['actions']['preview_changes'])) {
    $form['actions']['preview_changes']['#access'] = FALSE;
  }
}

function oira_workflow_node_form_after_build_hide_hints($form, &$form_state) {
  $b = element_children($form['body']);
  $key = array_pop($b);
  if ($key && !empty($form['body'][$key][0]['format'])) {
    $form['body'][$key][0]['format']['#attributes']['class'][] = 'hidden';
    $form['body'][$key][0]['summary']['#access'] = FALSE;
  }
  if (!empty($form['field_summary'])) {
    $sum = element_children($form['field_summary']);
    $key = array_pop($sum);
    if ($key && !empty($form['field_summary'][$key][0]['format'])) {
      $form['field_summary'][$key][0]['format']['#attributes']['class'][] = 'hidden';
    }
  }

  return ($form);
}


/**
 * Submit callback for Partner's Preview button.
 */
function oira_workflow_node_form_submit_preview($form, &$form_state) {
  $form_state['values']['workbench_moderation_state_new'] = 'draft';
  $form_state['input']['workbench_moderation_state_new'] = 'draft';
  node_form_submit($form, $form_state);
}

/**
 * Submit callback for Partner's Send to approve button.
 */
function oira_workflow_node_form_submit_send($form, &$form_state) {
  $form_state['values']['workbench_moderation_state_new'] = 'final_draft';
  $form_state['input']['workbench_moderation_state_new'] = 'final_draft';
  node_form_submit($form, $form_state);
}

function _oira_workflow_get_node_final_draft_time($node) {
  $transition = db_select('workbench_moderation_node_history', 'wmh')
    ->condition('wmh.nid', $node->nid)
    ->condition('wmh.from_state', 'draft')
    ->condition('wmh.state', 'final_draft')
    ->orderBy('wmh.hid', 'DESC')
    ->execute()
    ->fetchAssoc();
  if (!empty($transition)) {
    return $transition['stamp'];
  }
  return FALSE;
}

function _oira_workflow_load_users_by_section($section_id) {
  $uids = db_select('workbench_access_user', 'wau')
    ->fields('wau', array('uid', 'access_id'))
    ->condition('access_scheme', 'taxonomy')
    ->condition('access_id', $section_id)
    ->execute()
    ->fetchAllKeyed();
  $uids = array_keys($uids);
  return user_load_multiple($uids);
}
