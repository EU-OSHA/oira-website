<?php
/**
 * @file
 * Code for the HWC Practical tool feature.
 */

include_once 'hwc_practical_tool.features.inc';

/**
 * Implements hook_block_info().
 */
function hwc_practical_tool_block_info() {
  $blocks = array();
  $blocks['hwc_practical_tool_listing'] = array(
    'info' => t('Practical tools listing'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hwc_practical_tool_language_list'] = array(
    'info' => t('Practical tool language list'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_field_extra_fields().
 */
function hwc_practical_tool_field_extra_fields() {
  $extra = array(
    'display' => array(
      'related_partners' => array(
        'label' => t('Related partners'),
        'description' => t('Related partners'),
        'extra field type' => 'related_partners',
        'weight' => 0,
        'callback' => 'hwc_practical_tool_related_partners_callback',
      ),
      'tools_see_more' => array(
        'label' => t('See more link'),
        'description' => t('See more link'),
        'extra field type' => 'tools_see_more',
        'weight' => 0,
        'callback' => 'hwc_practical_tool_see_more_callback',
      ),
    ),
  );
  $extra['node']['practical_tool'] = $extra;

  return $extra;
}


/**
 * Implements hook_node_view().
 */
function hwc_practical_tool_node_view($node, $view_mode, $langcode) {
  $extra_fields = field_info_extra_fields('node', $node->type, 'display');
  if (!empty($extra_fields['related_partners']['display'][$view_mode]['visible'])) {
    $extra_field_pc = $extra_fields['related_partners'];
    $display = $extra_fields['related_partners']['display'];
    $node->content['related_partners'] = [
      '#theme' => 'field',
      '#label_display' => isset($display[$view_mode]['label']) ? $display[$view_mode]['label'] : 'hidden',
      '#title' => $extra_field_pc['label'],
      '#items' => _hwc_practical_tool_get_partners($node),
      '#field_type' => 'extra_field',
      '#field_name' => 'related_partners',
      '#entity_type' => 'node',
      '#bundle' => 'partner',
      '#view_mode' => $view_mode,
      '#weight' => (int) $display[$view_mode]['weight'],
    ];
  }
  if (!empty($extra_fields['tools_see_more']['display'][$view_mode]['visible'])) {
    $extra_field_see_more = $extra_fields['tools_see_more'];
    if (!empty($extra_field_see_more['display'][$view_mode]['visible'])) {
      $display = $extra_fields['tools_see_more']['display'];
      $node->content['tools_see_more'] = [
        '#theme' => 'field',
        '#label_display' => isset($display[$view_mode]['label']) ? $display[$view_mode]['label'] : 'hidden',
        '#title' => $extra_field_see_more['label'],
        '#items' => array($node->nid => 'See more'),
        '#field_type' => 'extra_field',
        '#field_name' => 'tools_see_more',
        '#entity_type' => 'node',
        '#bundle' => 'partner',
        '#view_mode' => $view_mode,
        '#weight' => (int) $display[$view_mode]['weight'],
      ];
    }
  }
}

function _hwc_practical_tool_related_partners_cid($node) {
  return 'tool_related_partners:' . $node->nid;
}

function _hwc_practical_tool_get_partners($node) {
  $cache = cache_get(_hwc_practical_tool_related_partners_cid($node));
  if (!empty($cache)) {
    return $cache->data;
  }

  $partners = array();
  if (!empty($node->workbench_access)) {
    reset($node->workbench_access);
    $section = current($node->workbench_access);
    $partner = oira_partner_by_section_id_load($section);
    if (!empty($partner)) {
      $partners[] = $partner;
    }
    if (!empty($node->field_co_author)) {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $term = $node_wrapper->field_co_author->value();
      if (!empty($term->tid)) {
        $co_partner = oira_partner_by_section_id_load($term->tid);
        if (!empty($co_partner)) {
          $partners[] = $co_partner;
        }
      }
    }
    if (!empty($node->field_third_partner)) {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $term = $node_wrapper->field_third_partner->value();
      if (!empty($term->tid)) {
        $co_partner = oira_partner_by_section_id_load($term->tid);
        if (!empty($co_partner)) {
          $partners[] = $co_partner;
        }
      }
    }
  }

  cache_set(_hwc_practical_tool_related_partners_cid($node), $partners, 'cache', variable_get('page_cache_maximum_age', strtotime('+1 day')));

  return $partners;
}

/**
 * Implements hook_node_presave().
 */
function hwc_practical_tool_node_presave($node) {
  if ($node->type == 'practical_tool') {
    cache_clear_all(_hwc_practical_tool_related_partners_cid($node), 'cache');

    // Set empty revised date as publication date.
    if (!empty($node->field_publication_date[LANGUAGE_NONE][0]['value'])
      && empty($node->field_revised_date[LANGUAGE_NONE][0]['value'])) {
      $node->field_revised_date[LANGUAGE_NONE][0] = $node->field_publication_date[LANGUAGE_NONE][0];
    }
  }
}


function hwc_practical_tool_field_extra_fields_formatter_info() {
  return [
    'related_partners' => [
      'label' => t('Related partners'),
      'description' => t('Format related partners.'),
      'extra field types' => ['related_partners'],
//      'settings' => ['format' => 'medium'],
    ],
    'tools_see_more' => [
      'label' => t('See more details link'),
      'description' => t('Shows more details about tool'),
      'extra field types' => ['tools_see_more'],
      'settings' => [
        'slice_point' => 250,
        'parent_selector' => '.views-row, .views-item-columns-container',
      ],
    ],
  ];
}

function hwc_practical_tool_field_extra_fields_formatter_settings_form($extra_field_name, $view_mode, $display, $form, &$form_state) {
  $settings = $display['settings'];
  $element = [];
  switch ($display['type']) {
    case 'related_partners':
      break;

    case 'tools_see_more':
      $element['slice_point'] = array(
        '#type' => 'textfield',
        '#title' => t('Slice point'),
        '#description' => t('Slice point to apply to body.'),
        '#default_value' => $settings['slice_point'],
      );
      $element['parent_selector'] = array(
        '#type' => 'textfield',
        '#title' => t('Parent selectors'),
        '#description' => t('Parent container selector'),
        '#default_value' => $settings['parent_selector'],
      );
      break;
  }
  return $element;
}

function hwc_practical_tool_field_extra_fields_formatter_settings_summary($extra_field_name, $view_mode, $display) {
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'related_partners':
      return t('Display partners');

    case 'tools_see_more':
      return t('See more');
  }
}

function hwc_practical_tool_field_extra_fields_formatter_view($entity_type, $entity, $extra_field_name, $langcode, $items, $display) {
  $element = [];
  if (empty($display['settings'])) {
    $settings = hwc_practical_tool_field_extra_fields_formatter_info()['tools_see_more']['settings'];
  }
  else {
    $settings = $display['settings'];
  }
  switch ($display['type']) {
    case 'related_partners':
      foreach ($items as $delta => $item) {
        if ($item->status) {
          $render = node_view($item, 'teaser');
          $element[$delta] = array(
            '#type' => 'markup',
            '#markup' => drupal_render($render),
          );
        }
        else {
          unset($element[$delta]);
        }
      }
      break;

    case 'tools_see_more':
      $path = drupal_get_path('module', 'hwc_practical_tool');
      foreach ($items as $delta => $item) {
        // TODO add js and css.
        $settings['show_more_text'] = 'See more';
        $settings['show_less_text'] = 'See less';
        $settings['delta'] = $entity->nid;
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => '<span class="tools-see-more" data-nid="' . $entity->nid . '"><a class="more-link" href="#">' . t('See more') . '</a></span>',
          '#attached' => array(
            'css' => array(
              $path . '/css/see_more.css',
            ),
            'js' => array(
              $path . '/js/see_more.js',
              libraries_get_path('jquery.expander') . '/jquery.expander.js' => array('type' => 'file'),
              array('data' => array('tools_expander' => array($delta => $settings)), 'type' => 'setting'),
            ),
          ),
        );
      }
      break;
  }
  return $element;
}

/**
 * Extra field callback for views.
 */
function hwc_practical_tool_related_partners_callback($node) {
  $node->related_partners = _hwc_practical_tool_get_partners($node);
  hwc_practical_tool_node_view($node, 'teaser', 'en');
  if (!empty($node->content['related_partners'])) {
    $content = $node->content['related_partners'];
    $display = array('type' => 'related_partners');
    $element = hwc_practical_tool_field_extra_fields_formatter_view('node', $node, 'related_partners', 'en', $content['#items'], $display);
    $element['#type'] = 'container';
    $element['#attributes'] = array('class' => array('field-name-related-partners'));
    return drupal_render($element);
  }
}

/**
 * Extra field callback for views.
 */
function hwc_practical_tool_see_more_callback($node) {
  $items = array('See more');
  $display = array('type' => 'tools_see_more', 'view_mode' => 'teaser');
  $extra_fields = field_info_extra_fields('node', $node->type, 'display');
  if (!empty($extra_fields['tools_see_more'])) {
    $element = hwc_practical_tool_field_extra_fields_formatter_view('node', $node, 'tools_see_more', 'en', $items, $display);
    return drupal_render($element);
  }
  return;
}




/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hwc_practical_tool_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Add lang options to language field filter on admin page.
  if ($form['#id'] == 'views-exposed-form-administrate-oira-tools-page') {
    if (!empty($form['field_language_value'])) {
      $form['field_language_value']['#type'] = 'select';
      $form['field_language_value']['#options'] = array('' => 'Any') + osha_language_list_options();
      $form['field_language_value']['#chosen'] = TRUE;
    }
    if (!empty($form['access_id'])) {
      $form['access_id']['#chosen'] = TRUE;
    }
  }
}

function hwc_practical_tool_node_get_sort_title_en($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'en');
}


function hwc_practical_tool_node_get_sort_title_bg($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'bg');
}


function hwc_practical_tool_node_get_sort_title_cs($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'cs');
}


function hwc_practical_tool_node_get_sort_title_da($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'da');
}


function hwc_practical_tool_node_get_sort_title_de($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'de');
}


function hwc_practical_tool_node_get_sort_title_el($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'el');
}


function hwc_practical_tool_node_get_sort_title_es($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'es');
}


function hwc_practical_tool_node_get_sort_title_et($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'et');
}


function hwc_practical_tool_node_get_sort_title_fi($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'fi');
}


function hwc_practical_tool_node_get_sort_title_hr($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'hr');
}


function hwc_practical_tool_node_get_sort_title_fr($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'fr');
}


function hwc_practical_tool_node_get_sort_title_hu($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'hu');
}


function hwc_practical_tool_node_get_sort_title_is($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'is');
}


function hwc_practical_tool_node_get_sort_title_it($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'it');
}


function hwc_practical_tool_node_get_sort_title_lv($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'lv');
}


function hwc_practical_tool_node_get_sort_title_lt($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'lt');
}


function hwc_practical_tool_node_get_sort_title_nl($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'nl');
}


function hwc_practical_tool_node_get_sort_title_mt($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'mt');
}


function hwc_practical_tool_node_get_sort_title_no($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'no');
}


function hwc_practical_tool_node_get_sort_title_pl($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'pl');
}


function hwc_practical_tool_node_get_sort_title_pt($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'pt');
}


function hwc_practical_tool_node_get_sort_title_ro($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'ro');
}


function hwc_practical_tool_node_get_sort_title_sk($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'sk');
}


function hwc_practical_tool_node_get_sort_title_sl($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'sl');
}


function hwc_practical_tool_node_get_sort_title_sv($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'sv');
}


function hwc_practical_tool_node_get_sort_title_ca($item) {
  return hwc_practical_tool_node_get_sort_title($item, 'ca');
}

function hwc_practical_tool_node_get_sort_sector_en($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'en');
}

function hwc_practical_tool_node_get_sort_sector_bg($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'bg');
}

function hwc_practical_tool_node_get_sort_sector_cs($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'cs');
}

function hwc_practical_tool_node_get_sort_sector_da($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'da');
}

function hwc_practical_tool_node_get_sort_sector_de($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'de');
}

function hwc_practical_tool_node_get_sort_sector_el($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'el');
}

function hwc_practical_tool_node_get_sort_sector_es($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'es');
}

function hwc_practical_tool_node_get_sort_sector_et($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'et');
}

function hwc_practical_tool_node_get_sort_sector_fi($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'fi');
}

function hwc_practical_tool_node_get_sort_sector_hr($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'hr');
}

function hwc_practical_tool_node_get_sort_sector_fr($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'fr');
}

function hwc_practical_tool_node_get_sort_sector_hu($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'hu');
}

function hwc_practical_tool_node_get_sort_sector_is($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'is');
}

function hwc_practical_tool_node_get_sort_sector_it($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'it');
}

function hwc_practical_tool_node_get_sort_sector_lv($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'lv');
}

function hwc_practical_tool_node_get_sort_sector_lt($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'lt');
}

function hwc_practical_tool_node_get_sort_sector_nl($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'nl');
}

function hwc_practical_tool_node_get_sort_sector_mt($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'mt');
}

function hwc_practical_tool_node_get_sort_sector_no($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'no');
}

function hwc_practical_tool_node_get_sort_sector_pl($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'pl');
}

function hwc_practical_tool_node_get_sort_sector_pt($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'pt');
}

function hwc_practical_tool_node_get_sort_sector_ro($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'ro');
}

function hwc_practical_tool_node_get_sort_sector_sk($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'sk');
}

function hwc_practical_tool_node_get_sort_sector_sl($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'sl');
}

function hwc_practical_tool_node_get_sort_sector_sv($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'sv');
}

function hwc_practical_tool_node_get_sort_sector_ca($item) {
  return hwc_practical_tool_node_get_sort_sector($item, 'ca');
}

function hwc_practical_tool_node_get_sort_title($item, $language) {
  if ($item->type != 'practical_tool') {
    return NULL;
  }
  $wrapper = entity_metadata_wrapper('node', $item);
  $field_language = $wrapper->field_language->value();
  if ($field_language && $field_language['value'] == $language) {
    return $wrapper->field_alternative_title->value();
  }
  $field_language = $wrapper->field_third_language->value();
  if ($field_language && $field_language['value'] == $language) {
    return $wrapper->field_third_title->value();
  }
  return $wrapper->title_field->value();
}

function hwc_practical_tool_node_get_sort_sector($item, $language) {
  if ($item->type != 'practical_tool') {
    return NULL;
  }
  $wrapper = entity_metadata_wrapper('node', $item);
  $value = $wrapper->language($language)->field_sector_category->value();
  if ($value) {
    return $value->name;
  }
  return NULL;
}
/**
 * Implements hook_entity_property_info_alter().
 */
function hwc_practical_tool_entity_property_info_alter(&$info) {

  $options = ['en', 'bg', 'cs', 'da', 'de', 'el', 'es', 'et', 'fi', 'hr', 'fr', 'hu', 'is', 'it', 'lv', 'lt', 'nl', 'mt', 'no', 'pl', 'pt', 'ro', 'sk', 'sl', 'sv', 'ca'];
  foreach($options as $language) {
    $info['node']['properties']['practical_tool_sort_sector_' . $language] = array(
      'type' => 'string',
      'label' => t('Practical tool sort %language sector', ["%language" => $language]),
      'sanitized' => TRUE,
      'getter callback' => 'hwc_practical_tool_node_get_sort_sector_' . $language,
    );
  }
  $info['node']['properties']['practical_tool_sort_title_en'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "en"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_en',
  );

  $info['node']['properties']['practical_tool_sort_title_bg'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "bg"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_bg',
  );

  $info['node']['properties']['practical_tool_sort_title_cs'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "cs"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_cs',
  );

  $info['node']['properties']['practical_tool_sort_title_da'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "da"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_da',
  );

  $info['node']['properties']['practical_tool_sort_title_de'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "de"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_de',
  );

  $info['node']['properties']['practical_tool_sort_title_el'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "el"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_el',
  );

  $info['node']['properties']['practical_tool_sort_title_es'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "es"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_es',
  );

  $info['node']['properties']['practical_tool_sort_title_et'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "et"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_et',
  );

  $info['node']['properties']['practical_tool_sort_title_fi'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "fi"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_fi',
  );

  $info['node']['properties']['practical_tool_sort_title_hr'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "hr"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_hr',
  );

  $info['node']['properties']['practical_tool_sort_title_fr'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "fr"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_fr',
  );

  $info['node']['properties']['practical_tool_sort_title_hu'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "hu"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_hu',
  );

  $info['node']['properties']['practical_tool_sort_title_is'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "is"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_is',
  );

  $info['node']['properties']['practical_tool_sort_title_it'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "it"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_it',
  );

  $info['node']['properties']['practical_tool_sort_title_lv'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "lv"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_lv',
  );

  $info['node']['properties']['practical_tool_sort_title_lt'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "lt"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_lt',
  );

  $info['node']['properties']['practical_tool_sort_title_nl'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "nl"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_nl',
  );

  $info['node']['properties']['practical_tool_sort_title_mt'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "mt"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_mt',
  );

  $info['node']['properties']['practical_tool_sort_title_no'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "no"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_no',
  );

  $info['node']['properties']['practical_tool_sort_title_pl'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "pl"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_pl',
  );

  $info['node']['properties']['practical_tool_sort_title_pt'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "pt"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_pt',
  );

  $info['node']['properties']['practical_tool_sort_title_ro'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "ro"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_ro',
  );

  $info['node']['properties']['practical_tool_sort_title_sk'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "sk"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_sk',
  );

  $info['node']['properties']['practical_tool_sort_title_sl'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "sl"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_sl',
  );

  $info['node']['properties']['practical_tool_sort_title_sv'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "sv"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_sv',
  );

  $info['node']['properties']['practical_tool_sort_title_ca'] = array(
    'type' => 'string',
    'label' => t('Practical tool sort %language title', ["%language" => "ca"]),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_practical_tool_node_get_sort_title_ca',
  );
}

/**
 * Implements hook_block_view().
 */
function hwc_practical_tool_block_view($delta = '') {
  $block = array();
  if ($delta == 'hwc_practical_tool_language_list') {
    if ($node = menu_get_object()) {
      $q = db_select('languages', 'l');
      $q->fields('l', array('language', 'name', 'native'));
      $q->innerJoin('entity_translation', 'a', 'l.language = a.language');
      $q->condition('a.entity_id', $node->nid);
      $q->condition('a.entity_type', 'node');
      $languages = $q->execute()->fetchAll();

      $block['content'] = theme('hwc_practical_tool_language_list', array(
          'languages' => $languages,
        )
      );
    }
  }
  if ($delta == 'hwc_practical_tool_listing') {
    module_load_include('inc', 'hwc_practical_tool', 'hwc_practical_tool.pages');
    $block['content'] = drupal_get_form('hwc_practical_tool_menu_tools_form');
  }
  return $block;
}

/**
 * Use of osha_title_formatter_' . $entity->type . '_view'.
 *
 * Show the title alt when it's the case.
 */
function osha_title_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if (($field['field_name'] == 'title' || $field['field_name'] == 'title_field')
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_title[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_title[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_title[LANGUAGE_NONE][0]['safe_value'];
  }
  if (($field['field_name'] == 'title' || $field['field_name'] == 'title_field')
    &&!empty($entity->field_third_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_third_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_third_title[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_third_title[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_third_title[LANGUAGE_NONE][0]['safe_value'];
  }

  $settings = $display['settings'];
  $output = isset($items[0]) ? $items[0]['safe_value'] : '';

  $entity_wrapper = entity_metadata_wrapper('node', $entity);
  if (!empty($output) && $settings['title_link'] == 'content'
    && !empty($entity->field_tool_link)) {
    $uri = $entity_wrapper->field_tool_link->value();
    $output = l($output, $uri['url'], array('html' => TRUE, 'attributes' => array('class' => 'trim-title','target' => '_blank')));
  }

  $wrap_tag = empty($settings['title_style']) ? '_none' : $settings['title_style'];

  if ($wrap_tag != '_none') {
    $element = array(
      'element' => array(
        '#tag' => $wrap_tag,
        '#value' => $output,
      ),
    );

    if (!empty($settings['title_class'])) {
      $element['#attributes'] = array('class' => $settings['title_class']);
    }

    $output = theme('html_tag', $element);
  }

  $element = array(
    array(
      '#markup' => $output,
    ),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function hwc_practical_tool_field_formatter_settings_form_alter(array &$settings_form, array $context) {
  if ($context['instance']['display'][$context['view_mode']]['type'] == 'smart_trim_format') {
    $settings_form['tools_show_full'] = array(
      '#type' => 'checkbox',
      '#title' => 'Show full body for Tools',
      '#default_value' => $context['instance']['display'][$context['view_mode']]['tools_show_full'],
    );
  }
}


/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view'.
 *
 * Show the body alt when it's the case.
 */
function osha_smart_trim_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_body[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['safe_value'];
  }
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_third_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_third_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_third_description[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_third_description[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_third_description[LANGUAGE_NONE][0]['safe_value'];
  }

  if (!empty($display['settings']['tools_show_full'])) {
    $display['settings']['trim_length'] = 9999;
    $display['settings']['more_link'] = FALSE;
  }
  return smart_trim_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Use of osha_smart_trim_formatter_' . $entity->type . '_view'.
 *
 * Show the body alt when it's the case.
 */
function osha_text_formatter_practical_tool_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_alternative_body[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_alternative_body[LANGUAGE_NONE][0]['safe_value'];
  }
  if ($field['field_name'] == 'body'
    &&!empty($entity->field_third_language[LANGUAGE_NONE][0]['value'])
    && $entity->field_third_language[LANGUAGE_NONE][0]['value'] == $language->language
    && !empty($entity->field_third_description[LANGUAGE_NONE][0]['value'])) {
    $items[0]['value'] = $entity->field_third_description[LANGUAGE_NONE][0]['value'];
    $items[0]['safe_value'] = $entity->field_third_description[LANGUAGE_NONE][0]['safe_value'];
  }
  return text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_views_pre_render().
 */
function hwc_practical_tool_views_pre_render(&$view) {
  if ($view->name == 'tools' && in_array($view->current_display, array('block_1', 'block_2'))) {
    $view->display_handler->set_option('use_more', TRUE);
    $view->display_handler->set_option('use_more_text', t('View all the tools'));
    $view->display_handler->set_option('link_display', 'custom_url');
    $view->display_handler->set_option('use_more_always', TRUE);
    $view->display_handler->set_option('link_url', 'oira-tools');
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function hwc_practical_tool_field_formatter_info() {
  $info = array(
    'access_tool_link_and_language' => array(
      'label' => t('Access tool link and language'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label' => t('Visit tool in:'),
      ),
    ),
    'access_tool_link_details' => array(
      'label' => t('Access tool link for practical tool details'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label_1' => t('Access tool:'),
        'label_2' => t('Available in:'),
      ),
    ),
    'external_tool_link' => array(
      'label' => t('Link with icon'),
      'field types' => array('link_field'),
      'settings' => array(
        'text' => '',
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function hwc_practical_tool_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  switch ($display['type']) {
    case 'external_tool_link':
      $element['text'] = array(
        '#type' => 'textfield',
        '#title' => t('Text'),
        '#description' => t('Text'),
        '#default_value' => $settings['text'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_date_combo_process_alter().
 */
function hwc_practical_tool_date_combo_process_alter(&$element, $form_state, $context) {
  // Revised date max date now.
  if ($element['#field_name'] == 'field_revised_date') {
    $element['value']['#datepicker_options']['maxDate'] = date($element['value']['#date_format']);
  }
}

/**
 * Implements hook_theme().
 */
function hwc_practical_tool_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'hwc_practical_tool');
  $theme['hwc_practical_tool_language_list'] = array(
    'template' => 'hwc_practical_tool_language_list',
    'variables' => array(
      'languages' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_and_language'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_and_language',
    'variables' => array(
      'items' => NULL,
      'label' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_details'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_details',
    'variables' => array(
      'items' => NULL,
      'label_1' => NULL,
      'label_2' => NULL,
      'node' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['tool_link_formatter_icon_link'] = array(
    'variables' => array('element' => NULL, 'field' => NULL, 'display' => NULL),
  );
  return $theme;
}

/**
 * Implements hook_field_formatter_view().
 */
function hwc_practical_tool_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'access_tool_link_and_language':
      $settings = $display['settings'];
      $label = trim($settings['label']);
      $element = array(
        '#theme' => 'access_tool_link_and_language',
        '#items' => $items,
        '#label' => $label,
      );
      break;

    case 'access_tool_link_details':
      $settings = $display['settings'];
      $label_1 = trim($settings['label_1']);
      $label_2 = trim($settings['label_2']);
      $element = array(
        '#theme' => 'access_tool_link_details',
        '#items' => $items,
        '#label_1' => $label_1,
        '#label_2' => $label_2,
        '#node' => entity_metadata_wrapper('node', $entity),
      );
      break;

    case 'external_tool_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'tool_link_formatter_icon_link',
          '#element' => $item,
          '#field' => $instance,
          '#display' => $display,
        );
      }
      break;

  }
  return $element;
}

/**
 * Formats a link using "Link" as the link text.
 */
function theme_tool_link_formatter_icon_link($vars) {
  $link_options = $vars['element'];
  $link_options['external'] = TRUE;
  $link_options['attributes']['target'] = '_blank';
//  $link_options['attributes']['class'][] = '';
  $link_options['html'] = TRUE;
  $text = '';
  if (!empty($vars['display']['settings']['text'])) {
    $text = t($vars['display']['settings']['text']);
  }
  unset($link_options['title']);
  unset($link_options['url']);
  return $vars['element']['url'] ? l($text . '<span class="glyphicon glyphicon-new-window"></span>', $vars['element']['url'], $link_options) : '';
}

/**
 * Implements hook_token_info().
 */
function hwc_practical_tool_token_info() {
  // Add as token the alternative title.
  $info['tokens']['node']['title-alt'] = array(
    'name' => t('Title or title alt'),
    'description' => t("Bullshit"),
    'type' => 'node',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function hwc_practical_tool_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $language;
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title-alt':
          $title = $node->title;
          $replacements[$original] = $sanitize ? filter_xss($title) : $title;
          if ($node->type == 'practical_tool'
            && !empty($node->field_language[LANGUAGE_NONE][0]['value'])
            && $node->field_language[LANGUAGE_NONE][0]['value'] == $language->language
            && !empty($node->field_alternative_title[LANGUAGE_NONE][0]['value'])) {
            $replacements[$original] = $node->field_alternative_title[LANGUAGE_NONE][0]['safe_value'];
          }
          break;
      }
    }
  }
  return $replacements;
}
