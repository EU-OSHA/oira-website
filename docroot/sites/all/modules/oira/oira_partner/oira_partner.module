<?php
/**
 * @file
 * Code for the Oira Partner feature.
 */

include_once 'oira_partner.features.inc';
include_once 'oira_partner.inc';

define('OIRA_PARTNER_TYPE_SECTORIAL_TID', 284);
define('OIRA_PARTNER_TYPE_NATIONAL_TID', 262);
define('OIRA_PARTNER_TYPE_IRAT_TID', 263);

define('OIRA_PARTNER_COUNTRY_EU_LEVEL', 256);

/**
 * Implements hook_menu().
 */
function oira_partner_menu() {
  $items['private-zone'] = [
    'title' => 'Private zone',
    'page callback' => 'oira_partner_private_zone_callback',
    'access callback' => 'oira_partner_has_role',
    'access arguments' => [ROLE_OIRA_PARTNER],
  ];

  $items['private-zone/view-profile'] = [
    'title' => 'Private zone',
    'page callback' => 'oira_partner_private_zone_update_callback',
    'access callback' => 'oira_partner_has_role',
    'access arguments' => [ROLE_OIRA_PARTNER],
  ];

  return $items;
}

function oira_partner_has_role($role_name) {
  /// allow admin to add it as menu item.
  $admin_role = user_role_load_by_name(OSHA_WORKFLOW_ROLE_ADMINISTRATOR);
  if (user_has_role($admin_role->rid)) {
    return TRUE;
  }
  $role = user_role_load_by_name($role_name);
  return user_has_role($role->rid);
}

function oira_partner_private_zone_callback() {
  $partner = oira_partner_get_account_partner();
  if (!empty($partner)) {
    $uri = entity_uri('node', $partner);
    drupal_goto($uri['path']);
  }
  else {
    drupal_access_denied();
  }
}


function oira_partner_private_zone_update_callback() {
  $partner = oira_partner_get_account_partner();
  if (!empty($partner)) {
    drupal_goto('node/' . $partner->nid . '/view-profile');
  }
  else {
    drupal_access_denied();
  }
}

function oira_partner_field_extra_fields_formatter_info() {
  return [
    'partner_content_count' => [
      'label' => t('Partner count'),
      'description' => t('Format partner count.'),
      'extra field types' => ['partner_content_count'],
//      'settings' => ['format' => 'medium'],
    ],
  ];
}


function oira_partner_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['country_partner_content'] = array(
    'label' => t('Content in country'),
    'custom settings' => FALSE,
  );
}

function oira_partner_field_extra_fields_formatter_settings_form($extra_field_name, $view_mode, $display, $form, &$form_state) {
  $settings = $display['settings'];
  $element = [];
  switch ($display['type']) {
    case 'partner_content_count':
      break;
  }
  return $element;
}

function oira_partner_field_extra_fields_formatter_settings_summary($extra_field_name, $view_mode, $display) {
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'partner_content_count':
      return t('Display counts');
  }
}

function oira_partner_field_extra_fields_formatter_view($entity_type, $entity, $extra_field_name, $langcode, $items, $display) {
  $element = [];
//  $settings = $display['settings'];
  switch ($display['type']) {
    case 'partner_content_count':
      $types = node_type_get_types();
      if (!empty($items)) {
        foreach ($items as $delta => $item) {
          if ($item == 0) {
            $item = '-';
          }
          else {
            // Make link to node.
            $item = l($item, 'node/' . $entity->nid, array('fragment' => $delta));
          }
          $element[$delta] = array(
            '#type' => 'item',
            '#title' => $types[$delta]->name,
            '#prefix' => '<div class="partner-content-label partner-content-count-' . $delta . '">',
            '#suffix' => '</div>',
            '#markup' => '<span class="partner-content-counter">' . $item . '</span>',
          );
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function oira_partner_preprocess_node(&$variables) {
  if (!empty($variables['node'])) {
    $node = $variables['node'];
    if ($node->type == 'practical_tool') {
      if (!empty($node->field_sector[LANGUAGE_NONE][0]['tid'])) {
//        $term = taxonomy_term_load($node->field_sector[LANGUAGE_NONE][0]['tid']);
        $term = taxonomy_term_load($node->field_sector_category[LANGUAGE_NONE][0]['tid']);
        $variables['attributes_array']['data-sector-tid'] = $term->tid;
        $variables['attributes_array']['data-sector-label'] = $term->name;
      }
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function oira_partner_field_extra_fields() {
  $content_count = array(
    'display' => array(
      'partner_content_count' => array(
        'label' => t('Content count'),
        'description' => t('Partner content count'),
        'extra field type' => 'partner_content_count',
        'weight' => 0,
        'callback' => 'oira_partner_views_field_content_count_callback',
      ),
    ),
  );
  $extra['node']['partner'] = $content_count;
  return $extra;
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function oira_partner_block_view_menu_block_6_alter(&$data, $block) {
  // Show the private zone menu block only for partner's node.
  if ($node = menu_get_object()) {
    $allowed_node_types = ['private_album'];
    if (!in_array($node->type, $allowed_node_types)) {
      $data['content']['#access'] = oira_node_belongs_to_partner_user($node);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function oira_partner_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'partner') {
    $extra_fields = field_info_extra_fields('node', $node->type, 'display');
    $extra_field_pc = $extra_fields['partner_content_count'];
    if (!empty($extra_field_pc['display'][$view_mode]['visible'])) {
      $display = $extra_fields['partner_content_count']['display'];
      $node->content['partner_content_count'] = [
          '#theme' => 'field',
          '#label_display' => $extra_field_pc['label'],
          '#title' => $extra_field_pc['label'],
          '#items' => _oira_partner_compute_content_count($node),
          '#field_type' => 'extra_field',
          '#field_name' => 'partner_content_count',
          '#entity_type' => 'node',
          '#bundle' => 'partner',
          '#weight' => (int) $display[$view_mode]['weight'],
        ];
    }
  }
}

/**
 * Extra field callback for views.
 */
function oira_partner_views_field_content_count_callback($node) {
  $extra_fields = field_info_extra_fields('node', $node->type, 'display');
  $extra_field_pc = $extra_fields['partner_content_count'];
  $content = [
    '#theme' => 'field',
    '#label_display' => $extra_field_pc['label'],
    '#title' => $extra_field_pc['label'],
    '#items' => _oira_partner_compute_content_count($node),
    '#field_type' => 'extra_field',
    '#field_name' => 'partner_content_count',
    '#entity_type' => 'node',
    '#bundle' => 'partner',
  ];
  $display = array('type' => 'partner_content_count');
  $element = oira_partner_field_extra_fields_formatter_view('taxonomy_term', $node, 'partner_content_count', 'en', $content['#items'], $display);
  return drupal_render($element);
}

function oira_partner_profile_form_redirect_profile($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'user/' . $user->uid;
  drupal_redirect_form($form_state);
}

/**
 * Implments hook_form_FORM_ID_alter().
 */
function oira_partner_form_user_profile_form_alter(&$form, $form_state) {
  global $user;
  if (in_array(ROLE_OIRA_PARTNER, $user->roles)) {
    $form['field_cmw_mail_notifications']['#access'] = FALSE;
    $form['#submit'][] = 'oira_partner_user_profile_form_redirect';
  }

  if (isset($_REQUEST['pass-reset-token'])) {
    if (!in_array(ROLE_OIRA_PARTNER, $user->roles)) {
      $form['#submit'][] = 'oira_partner_profile_form_redirect_profile';
    }
  }

  //TODO: HIDE GUID FIELD AFTER TESTING
  $form['field_crm_guid']['#access'] = FALSE;
  //$form['field_user_partner_guid']['#access'] = FALSE;

  $form['redirect']['#access'] = FALSE;
  $form['masquerade']['#access'] = FALSE;
  $form['flickr']['#access'] = FALSE;
  $form['metatags']['#access'] = FALSE;
  $form['tmgmt_translation_skills']['#access'] = FALSE;
  $form['contact']['#access'] = FALSE;
  $form['contact']['contact']['#access'] = FALSE;
  $form['mimemail']['#access'] = FALSE;
  $form['mimemail']['mimemail_textonly']['#access'] = FALSE;
  $form['field_flickr_tags']['#access'] = FALSE;
  $form['locale']['#access'] = FALSE;
  $form['locale']['language']['#access'] = FALSE;
}

/**
 * For partners, when the user changes the password and saves changes, the system
 * should redirect them to the Private Zone.
 */
function oira_partner_user_profile_form_redirect($form, &$form_state) {
  $partner = oira_partner_get_account_partner();
  $form_state['redirect'] = 'node/' . $partner->nid;
  drupal_redirect_form($form_state);
}

/**
 * Implements hook_block_info().
 */
function oira_partner_block_info() {
  $blocks = array();
  $blocks['oira_partner_country'] = array(
    'info' => t('Oira partner in country'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'weight' => -3,
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['oira_partner_masquerade'] = array(
    'info' => t('Act as a partner'),
    'status' => 1,
    'region' => 'header_block',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 50,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}
 */
function oira_partner_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'oira_partner_country':
      $block['subject'] = '';
      $block['content'] = _oira_partner_partner_country_minipanel();
      break;

    case 'oira_partner_country_content':
      $block['subject'] = '';
      $block['content'] = _oira_partner_partner_country_minipanel();
      break;

    case 'oira_partner_masquerade':
      $block['title'] = '<none>';
      if (isset($_SESSION['masquerading'])) {
        $block['content'] = l(t('Switch back to your user'), 'masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch'))));
      }
      elseif (user_access('masquerade as any user')) {
        $form = drupal_get_form('masquerade_block_1');
        $block['content'] = theme('oira_partner_act_as_partner_block', array('content' => drupal_render($form)));
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_block_view().
 */
function _oira_partner_partner_country_minipanel() {
  $render = array();
  $term = menu_get_object('taxonomy_term', 2);

  module_load_include('inc', 'oira_country', 'plugins/content_types/focal_point_text');

  if (!empty($term)) {
    $partners = _oira_partner_get_by_country($term->tid, array(OIRA_PARTNER_TYPE_SECTORIAL_TID, OIRA_PARTNER_TYPE_NATIONAL_TID));
    if (!empty($partners)) {
      $count = count($partners);
      $more_partners_class = ($count>2)?'country-more-partners':'';
      $render = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('country-partners-container', 'partners-no-' . $count, $more_partners_class)),
      );

      $fp_text = oira_country_focal_point_pane_render();

      if ($count > 2) {
        // Show logo views.
        $view = views_get_view('oira_partners');
        $view->set_display('block_1');
        $view->set_arguments([$term->tid]);
        $view->execute();
        $render['logo_block'] = array(
          '#type' => 'markup',
          '#markup' => $view->render(),
        );
        drupal_add_js(drupal_get_path('module', 'oira_partner') . '/js/partner_list.js', ['type' => 'file']);
      }

      $partners = node_load_multiple($partners);
      $extra_class = '';
      if ($count == 2) {
        $render['#attributes']['class'][] = 'row';
        $extra_class = 'col-md-6';
      }
      foreach ($partners as $node) {
        $name = 'partner_in_country';
        $panel_mini = panels_mini_load($name);
        ctools_include('context');
        $context = ctools_context_create('entity:node', $node);
        $contexts = ctools_context_match_required_contexts($panel_mini->requiredcontexts, array($context));
        $panel_mini->context = $panel_mini->display->context = ctools_context_load_contexts($panel_mini, FALSE, $contexts);
        $panel_mini->display->css_id = panels_mini_get_id($panel_mini->name);

        // remove the limit of title for countries with only one partner.
        if ($count == 1 || $count > 2) {
          foreach ($panel_mini->display->content as $item) {
            if ($item->subtype == 'node:title_field') {
              unset($panel_mini->display->content[$item->pid]->css['css_class']);
            }
          }
        }

        $style = '';
        $panel_content = panels_render_display($panel_mini->display);
        if ($count > 2) {
          $style = ' display: none; ';
          $panel_content .= $fp_text->content;
        }
        $html = '<div data-partner-nid="@nid" class="country-partner-wrapper @extra_class" style="@style">@panel</div>';
        $html = strtr($html, array(
          '@extra_class' => $extra_class,
          '@style' => $style,
          '@panel' => $panel_content,
          '@nid' => $node->nid,
        ));
        $render[] = array(
          '#type' => 'markup',
          '#markup' => $html,
        );
      }
      if ($count <= 2) {
        $render[] = array(
          '#type' => 'markup',
          '#markup' => $fp_text->content,
        );
      }
    }
  }
  return $render;
}

/**
 * Implements hook_form_alter().
 */
function oira_partner_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the country selector if is partner content.
  if (!empty($form['#node'])) {
    $bundle = $form['#node']->type;
    if ($bundle != 'partner'
      && variable_get('workbench_access_node_type_' . $bundle, 0)
      && isset($form['field_country'])) {
      $form['field_country']['#access'] = FALSE;
    }
    if ($bundle == 'news') {
      $role = user_role_load_by_name(ROLE_OIRA_PARTNER);
      if (user_has_role($role->rid)) {
       $form['field_co_author']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function oira_partner_node_presave($node) {
  // Invalidate content count cache.
  if ($node->type == 'partner') {
    cache_clear_all(_oira_partner_compute_count_cid($node), 'cache');

    // If country is caching, change to all partner content.
    $old_country =
      !empty($node->original->field_country) &&
      !empty($node->original->field_country[LANGUAGE_NONE])
      ? $node->original->field_country[LANGUAGE_NONE][0]['tid']
      : NULL;
    $new_country = !empty($node->field_country) && !empty($node->field_country[LANGUAGE_NONE])
      ? $node->field_country[LANGUAGE_NONE][0]['tid']
      : NULL;
    $field_country = $node->field_country;
    if (!empty($node->field_oira_eu_level) && $node->field_oira_eu_level[LANGUAGE_NONE][0]['value']) {
      $new_country = OIRA_PARTNER_COUNTRY_EU_LEVEL;
      $field_country[LANGUAGE_NONE][0]['tid'] = $new_country;
    }
    if ($old_country !== $new_country) {
      $instance = field_info_field('field_country');
      $q = db_select('workbench_access_node', 'w');
      $q->innerJoin('node', 'n', 'w.nid = n.nid');
      $q->fields('n', ['nid', 'type'])
        ->condition('n.type', $instance['bundles']['node'], 'IN')
        ->condition('n.type', 'partner', '!=')
        ->condition('w.access_id', $node->workbench_access);
      $pm_nids = $q->execute()->fetchAllKeyed(0);
      foreach ($pm_nids as $nid => $type) {
        field_attach_update('node', (object) [
          'nid' => $nid,
          'type' => $type,
          'field_country' => $field_country,
        ]);
      }
    }
  }

  // For Partners content, the content with country inherit the country.
  if (in_array($node->type, _oira_get_content_types_for_partners())) {
    if (!empty($node->workbench_access)) {
      if (is_array($node->workbench_access)) {
        $section_id = current($node->workbench_access);
      }
      else {
        $section_id = $node->workbench_access;
      }
      $partner = oira_partner_by_section_id_load($section_id);
      if (isset($node->field_country) && !empty($partner->field_country)) {
        $node->field_country = $partner->field_country;
      }
    }
  }
}

function _oira_partner_compute_count_cid($node) {
  return 'oira_partner_count:' . $node->nid;
}

function _oira_partner_compute_content_count($node) {
  $cache = cache_get(_oira_partner_compute_count_cid($node));
  if (!empty($cache)) {
    return $cache->data;
  }
  $bundles = array('news', 'practical_tool', 'promotional_material');
  $return = array();
  foreach ($bundles as $bundle) {
    $return[$bundle] = 0;
  }
  if (!empty($node->workbench_access)) {
    $section_id = current($node->workbench_access);
    $wa_subquery = db_select('workbench_access_node', 'wn')
      ->fields('wn', array('nid'))
      ->condition('access_id', $section_id);
    $co_subquery = db_select('field_data_field_co_author', 'co')
      ->fields('co', array('entity_id'))
      ->condition('field_co_author_tid', $section_id);
    $third_subquery = db_select('field_data_field_third_partner', 'co')
      ->fields('co', array('entity_id'))
      ->condition('field_third_partner_tid', $section_id);
    $or = db_or();
    $or->condition('n.nid', $wa_subquery, 'IN');
    $or->condition('n.nid', $co_subquery, 'IN');
    $or->condition('n.nid', $third_subquery, 'IN');
    $query = db_select('node', 'n')
      ->fields('n', array());
    $query->innerJoin('field_data_field_publication_date', 'pd', 'n.nid = pd.entity_id');
    $query->where('pd.field_publication_date_value <= NOW()');
    $query->condition('n.status', 1);
    $query->condition('n.type', $bundles, 'IN');
    $query->condition($or);
    $result = $query->execute()->fetchAllAssoc('nid');
    // TODO maybe we will need to store also the nids. for now just counts.
    foreach ($result as $res) {
      $return[$res->type]++;
    }
    cache_set(_oira_partner_compute_count_cid($node), $return, 'cache', variable_get('page_cache_maximum_age', strtotime('+1 day')));
    return $return;
  }
}

function _oira_partner_get_by_country($tid, $type_tid = array()) {
  $partners = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'partner')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_country', 'tid', $tid);
  if (!empty($type_tid)) {
    $query->fieldCondition('field_partner_type', 'tid', $type_tid, 'IN');
  }

  $result = $query->execute();
  if (isset($result['node'])) {
    $partners = array_keys($result['node']);
  }
  return $partners;
}

function oira_node_belongs_to_partner_user($node) {
  global $user;
  // if masquerade, the access it's not loaded correctly.
  workbench_access_user_load_data($user);
  $sections = array_keys($user->workbench_access);
  if (!empty($sections)) {
    $query = db_select('workbench_access_node', 'wan')
      ->fields('wan', array('nid'))
      ->condition('wan.access_id', $sections, 'IN')
      ->condition('wan.nid', $node->nid);
    $count = $query->execute()->rowCount();
    if ($count) {
      return TRUE;
    }
  }
  return FALSE;
}

function oira_partner_views_data() {
  $data['oira_partner']['partner_id'] = array(
    'title' => variable_get('oira_partner_label', 'partner id'),
    'help' => t('The partner id to which this node belongs.'),
    'field' => array(
      'handler' => 'oira_partner_handler_field_partner_id',
      'click sortable' => FALSE,
    ),
  );

  $data['oira_partner']['partner_url'] = array(
    'title' => variable_get('oira_partner_label', 'partner_url'),
    'help' => t('The partner url to which this node belongs.'),
    'field' => array(
      'handler' => 'oira_partner_handler_field_partner_url',
      'click sortable' => FALSE,
    ),
  );
  return $data;
}

/**
 * Implements hook_field_formatter_info().
 */
function oira_partner_field_formatter_info() {
  $formatters = array(
    'oira_partner' => array(
      'label' => t('Partner logo'),
      'field types' => array('image','field_logo'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function oira_partner_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function oira_partner_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function oira_partner_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $item['alt'] = $entity->title;
    $item['title'] = $entity->title;
    $item['attributes'] = array('class'=>array('img-responsive'));

    $element[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function oira_partner_theme() {
  $theme = array();

  $theme['oira_partner_act_as_partner_block'] = array(
    'template' => 'templates/oira_partner_act_as_partner_block',
    'variables' => array(
      'content' => '',
    )
  );

  return $theme;
}

function oira_partner_form_masquerade_block_1_alter(&$form, &$form_state) {
  // Add our own autocomplete to show only partners users.
  if (!empty($form['masquerade_user_field']['#autocomplete_path'])) {
    $form['masquerade_user_field']['#type'] = 'select';
    $form['masquerade_user_field']['#options'] = oira_partner_get_partners_user_options();
    $form['masquerade_user_field']['#chosen'] = TRUE;
    unset($form['masquerade_user_field']['#autocomplete_path']);
    unset($form['masquerade_user_field']['#size']);
    $form['#validate'] = array_merge(array('oira_partner_form_masquerade_validate'), $form['#validate']);
  }
  if (!empty($form['masquerade_desc'])) {
    $form['masquerade_desc']['#markup'] = t('Find the partner by typing its name');
    $form['masquerade_desc']['#weight'] = -10;
  }
  array_unshift($form['#submit'], 'oira_partner_form_masquerade_redirect');
  $form['submit']['#value'] = t('Switch account');
  $form['hint'] = array(
    '#type' => 'item',
    '#markup' => t('Hint: After switching to new partner account, there will be a link in the website header to switch back to your account'),
  );

  // @TODO: on key click must select the option from autocomplete, then submit the form.
  drupal_add_js("jQuery('#edit-masquerade-user-field').keydown(function(e) {if (e.keyCode == 13) { e.preventDefault(); }})",  array('type' => 'inline', 'scope' => 'footer'));
}

function oira_partner_form_masquerade_validate($form, &$form_state) {
  $no_masq_roles = array_filter(variable_get('masquerade_admin_roles', array()));
  $name = $form_state['values']['masquerade_user_field'];
  $masq_user = user_load_by_name($name);
  if (empty($masq_user)) {
    form_set_error('masquerade_user_field', t('Could not switch to the selected account!'));
    return;
  }
  $inter_roles = array_intersect(array_keys($masq_user->roles), $no_masq_roles);
  if (!empty($inter_roles)) {
    form_set_error('masquerade_user_field', t('You can only switch to a partner'));
    return;
  }
}

function oira_partner_form_masquerade_redirect($form, $form_state) {
  if (!empty($form_state['values']['masquerade_user_field']) && $account = user_load_by_name($form_state['values']['masquerade_user_field'])) {
    // If the user is a partner, redirect to the corresponding partner profile
    if (in_array(ROLE_OIRA_PARTNER, $account->roles) && !empty($account->workbench_access)) {
      $sections = array_keys($account->workbench_access);
      foreach ($sections as $id_section) {
        if ($partner = oira_partner_by_section_id_load($id_section)) {
          $_SERVER['HTTP_REFERER'] = 'node/' . $partner->nid;
          break;
        }
      }
    }
  }
}

/**
 * Get options array with [user_name] => partner_name.
 */
function oira_partner_get_partners_user_options() {
  $matches = array();
  $partner_rid = 11;
  // Get users with only PARTNER role and with a section attached.
  $query = db_select('taxonomy_term_data', 't')->fields('t', array('name'));
  $query->innerJoin('workbench_access_user', 'wu', 'wu.access_id = t.tid');
  $query->innerJoin('users', 'u', 'u.uid = wu.uid');
  $query->innerJoin('users_roles', 'ur', 'wu.uid = ur.uid');
  $query->addField('u', 'name', 'user_name');
  $query->condition('ur.rid', $partner_rid);
  $query->groupBy('t.name');
  $result = $query->execute();
  while ($row = $result->fetchAssoc()) {
    $matches[$row['user_name']] = $row['name'];
  }
  return $matches;
}
